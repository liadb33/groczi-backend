generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bookmark {
  id          String      @id @db.VarChar(255)
  deviceId    String      @db.VarChar(255)
  itemCode    String      @db.VarChar(20)
  createdAt   DateTime?   @default(now()) @db.DateTime(0)
  device_user device_user @relation(fields: [deviceId], references: [deviceId], onDelete: Cascade, map: "fk_bookmark_device")
  grocery     grocery     @relation(fields: [itemCode], references: [itemCode], onDelete: Cascade, map: "fk_bookmark_grocery")

  @@unique([deviceId, itemCode], map: "unique_device_grocery")
  @@index([itemCode], map: "fk_bookmark_grocery")
}

model cart_item {
  id          String      @id @db.VarChar(255)
  deviceId    String      @db.VarChar(255)
  itemCode    String      @db.VarChar(20)
  quantity    Int
  createdAt   DateTime?   @default(now()) @db.DateTime(0)
  device_user device_user @relation(fields: [deviceId], references: [deviceId], onDelete: Cascade, map: "fk_cart_device")
  grocery     grocery     @relation(fields: [itemCode], references: [itemCode], onDelete: Cascade, map: "fk_cart_grocery")

  @@unique([deviceId, itemCode], map: "unique_device_cart_item")
  @@index([itemCode], map: "fk_cart_grocery")
}

model chains {
  ChainId   String      @id @db.VarChar(20)
  ChainName String?     @db.VarChar(100)
  subchains subchains[]
}

model device_user {
  deviceId     String         @id @db.VarChar(255)
  createdAt    DateTime?      @default(now()) @db.DateTime(0)
  bookmark     bookmark[]
  cart_item    cart_item[]
  grocery_list grocery_list[]
}

model grocery {
  itemCode           String              @id @db.VarChar(20)
  itemType           Int?
  itemName           String?             @db.VarChar(100)
  manufacturerName   String?             @db.VarChar(100)
  unitQty            String?             @db.VarChar(30)
  unitOfMeasure      String?             @db.VarChar(30)
  isWeighted         Boolean?
  qtyInPackage       Int?
  unitOfMeasurePrice Decimal?            @db.Decimal(12, 2)
  quantity           Decimal?            @db.Decimal(12, 2)
  imageUrl           String?             @db.VarChar(500)
  category           String?             @db.VarChar(100)
  bookmark           bookmark[]
  cart_item          cart_item[]
  list_item          list_item[]
  promotion_grocery  promotion_grocery[]
  store_grocery      store_grocery[]
  store_grocery_price_history store_grocery_price_history[]
}

model grocery_list {
  id          String      @id @db.VarChar(255)
  name        String      @db.VarChar(255)
  deviceId    String      @db.VarChar(255)
  createdAt   DateTime?   @default(now()) @db.DateTime(0)
  device_user device_user @relation(fields: [deviceId], references: [deviceId], onDelete: Cascade, map: "fk_list_device")
  list_item   list_item[]

  @@index([deviceId], map: "fk_list_device")
}

model list_item {
  id           String       @id @db.VarChar(255)
  listId       String       @db.VarChar(255)
  itemCode     String       @db.VarChar(20)
  quantity     Int
  createdAt    DateTime?    @default(now()) @db.DateTime(0)
  grocery      grocery      @relation(fields: [itemCode], references: [itemCode], onDelete: Cascade, map: "fk_listitem_grocery")
  grocery_list grocery_list @relation(fields: [listId], references: [id], onDelete: Cascade, map: "fk_listitem_list")

  @@index([itemCode], map: "fk_listitem_grocery")
  @@index([listId], map: "fk_listitem_list")
}

model promotion {
  PromotionId       String              @db.VarChar(20)
  ChainId           String              @db.VarChar(20)
  SubChainId        String              @db.VarChar(20)
  StoreId           String              @db.VarChar(20)
  PromotionName     String?             @db.VarChar(100)
  StartDate         DateTime?           @db.DateTime(0)
  EndDate           DateTime?           @db.DateTime(0)
  stores            stores              @relation(fields: [ChainId, SubChainId, StoreId], references: [ChainId, SubChainId, StoreId], onDelete: NoAction, onUpdate: NoAction, map: "promotion_ibfk_1")
  promotion_grocery promotion_grocery[]

  @@id([PromotionId, ChainId, SubChainId, StoreId])
  @@index([ChainId, SubChainId, StoreId], map: "ChainId")
}

model promotion_grocery {
  PromotionId   String    @db.VarChar(20)
  ChainId       String    @db.VarChar(20)
  SubChainId    String    @db.VarChar(20)
  StoreId       String    @db.VarChar(20)
  itemCode      String    @db.VarChar(20)
  DiscountPrice Decimal?  @db.Decimal(12, 2)
  promotion     promotion @relation(fields: [PromotionId, ChainId, SubChainId, StoreId], references: [PromotionId, ChainId, SubChainId, StoreId], onDelete: NoAction, onUpdate: NoAction, map: "promotion_grocery_ibfk_1")
  grocery       grocery   @relation(fields: [itemCode], references: [itemCode], onDelete: NoAction, onUpdate: NoAction, map: "promotion_grocery_ibfk_2")

  @@id([PromotionId, ChainId, SubChainId, StoreId, itemCode])
  @@index([itemCode], map: "itemCode")
}

model store_grocery {
  itemCode      String   @db.VarChar(20)
  ChainId       String   @db.VarChar(20)
  SubChainId    String   @db.VarChar(20)
  StoreId       String   @db.VarChar(20)
  itemPrice     Decimal? @db.Decimal(12, 2)
  allowDiscount Boolean?
  grocery       grocery  @relation(fields: [itemCode], references: [itemCode], onDelete: NoAction, onUpdate: NoAction, map: "store_grocery_ibfk_1")
  stores        stores   @relation(fields: [ChainId, SubChainId, StoreId], references: [ChainId, SubChainId, StoreId], onDelete: NoAction, onUpdate: NoAction, map: "store_grocery_ibfk_2")

  @@id([itemCode, ChainId, SubChainId, StoreId])
  @@index([ChainId, SubChainId, StoreId], map: "store_grocery_ibfk_2")
}

model stores {
  ChainId       String          @db.VarChar(20)
  SubChainId    String          @db.VarChar(20)
  StoreId       String          @db.VarChar(20)
  StoreType     Int?
  StoreName     String?         @db.VarChar(100)
  Address       String?         @db.VarChar(150)
  City          String?         @db.VarChar(100)
  Latitude      Float?
  Longitude     Float?
  promotion     promotion[]
  store_grocery store_grocery[]
  store_grocery_price_history store_grocery_price_history[] @relation("StoreToPriceHistory")
  subchains     subchains       @relation(fields: [ChainId, SubChainId], references: [ChainId, SubChainId], onDelete: NoAction, onUpdate: NoAction, map: "stores_ibfk_1")

  @@id([ChainId, SubChainId, StoreId])
}

model subchains {
  ChainId      String   @db.VarChar(20)
  SubChainId   String   @db.VarChar(20)
  SubChainName String?  @db.VarChar(100)
  imageUrl     String?  @db.VarChar(500)
  stores       stores[]
  chains       chains   @relation(fields: [ChainId], references: [ChainId], onDelete: NoAction, onUpdate: NoAction, map: "subchains_ibfk_1")

  @@id([ChainId, SubChainId])
}


model store_grocery_price_history {
  ChainId        String   @db.VarChar(20)
  itemCode       String   @db.VarChar(20)
  SubChainId     String   @db.VarChar(20)
  StoreId        String   @db.VarChar(20)
  price          Decimal?  @db.Decimal(12, 2)
  updateDatetime DateTime @db.DateTime(0)

  @@id([itemCode, ChainId, SubChainId, StoreId, updateDatetime])

  @@index([itemCode, ChainId, SubChainId, StoreId, updateDatetime])

  grocery grocery @relation(fields: [itemCode], references: [itemCode], onDelete: NoAction, onUpdate: NoAction, map: "store_grocery_price_history_ibfk_1")
  stores  stores  @relation("StoreToPriceHistory", fields: [ChainId, SubChainId, StoreId], references: [ChainId, SubChainId, StoreId], onDelete: NoAction, onUpdate: NoAction, map: "store_grocery_price_history_ibfk_2")
}

enum ReqStatus {
  SENT        @map("נשלחה")
  IN_PROGRESS @map("בטיפול")
  DONE        @map("טופל")
  REJECTED    @map("נדחתה")
}

model users {
  id           Int        @id @default(autoincrement()) @db.UnsignedInt
  username     String     @unique @db.VarChar(255)
  passwordHash String     @map("password_hash") @db.Char(60)
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
  lastLogin    DateTime?  @default(now()) @map("last_login") @db.Timestamp(0)
}


model requests {
  id         Int          @id @default(autoincrement()) @db.UnsignedInt
  itemId     String       @map("item_id") @db.VarChar(255)
  deviceId   String       @map("device_id") @db.VarChar(255)

  reqSubject String       @map("req_subject") @db.VarChar(255)
  reqBody    String?      @map("req_body") @db.Text
  reqStatus  ReqStatus    @map("req_status") @default(SENT)
  createdAt  DateTime     @default(now()) @map("created_at") @db.Timestamp(0)

  @@index([deviceId])
}